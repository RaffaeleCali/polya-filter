PF <- function(W, a, apr_lvl, parallel) {
if (isSymmetric(W)) {
U <- triu(W)
idx <- which(U != 0, arr.ind = TRUE)
} else {
idx <- which(W != 0, arr.ind = TRUE)
}
i <- idx[,1]
j <- idx[,2]
w <- W[idx]
k_in <- colSums(W != 0, na.rm = TRUE)
s_in <- colSums(W, na.rm = TRUE)
k_out <- rowSums(W != 0, na.rm = TRUE)
s_out <- rowSums(W, na.rm = TRUE)
k_in <- k_in[j]
k_out <- k_out[i]
s_in <- s_in[j]
s_out <- s_out[i]
if (a < 0) {
cat('Starting the ML estimation\n')
a <- get_ML_estimate(W)
cat(paste0('Estimation ended, a = ', a, '\n'))
}
if (any(!is.integer(w))) {
apr_lvl <- 0
}
p1 <- polya_cdf(w, s_in, k_in, a, apr_lvl, parallel)
p2 <- polya_cdf(w, s_out, k_out, a, apr_lvl, parallel)
P <- pmin(p1, p2)
P[k_in == 1] <- p2[k_in == 1]
P[k_out == 1] <- p1[k_out == 1]
P[!is.na(k_in) & !is.na(k_out) & k_in == 1 & k_out == 1] <- 1
return(P)
}
polya_cdf <- function(w,s,k,a,L,parallel) {
p <- rep(NA, length(w))
if (a == 0) {
p <- pbeta(w/s, 1, 1/k)
}else {
idx1 <- s-w >= L * ((k-1)/a + 1)
idx2 <- w >= L * max(1/a, 1)
idx3 <- s >= L * max(k/a, 1)
idx4 <- k >= L * (a-1 + 1e-20)
idx <- as.numeric(idx1) + as.numeric(idx2) + as.numeric(idx3) + as.numeric(idx4) == 4
p[idx] <- (1/gamma(1/a)) * (1-w[idx]/s[idx])^((k[idx]-1)/a) * (w[idx] * k[idx] / (s[idx] * a))^(1/a-1)
idx <- which(as.numeric(idx) == 0)
if (length(idx) > 0) {
if (parallel == 0) {
for (ii in 1:length(idx)) {
n <- s[idx[ii]]
A <- 1/a
B <- (k[idx[ii]]-1)/a
x <- 0:(w[idx[ii]]-1)
p[idx[ii]] <- 1 - sum(exp(lgamma(n+1) + lbeta(x+A, n-x+B) - lgamma(x+1) - lgamma(n-x+B) - lbeta(A, B)))
}
} else {
aux <- rep(NA, length(idx))
for (ii in 1:length(idx)) {
n <- s[idx[ii]]
A <- 1/a
B <- (k[idx[ii]]-1)/a
x <- 0:(w[idx[ii]]-1)
aux[ii] <- 1 - sum(exp(lgamma(n+1) + lbeta(x+A, n-x+B) - lgamma(x+1) - lgamma(n-x+B) - lbeta(A, B)))
}
p[idx] <- aux
}
}
}
p[p < 0] <- 0
return(p)
}
View(polya_cdf)
edge_list <- list(
c("A", "B", 0.5),
c("B", "C", 0.3),
c("C", "A", 0.8),
c("D", "A", 0.2)
)
g <- graph()
g <- add_vertices(g, unique(unlist(edge_list[1:2])))
library(igraph)
g <- add_vertices(g, unique(unlist(edge_list[1:2])))
g <- graph()
g <- make_empty_graph()
g <- add_vertices(g, 5)
g <- add_edges(g, c(1,2, 1,3, 2,4, 3,4, 4,5),
attr=list(weight=c(0.5, 0.8, 0.2, 1.0, 0.6)))
adj_matrixg <- get.adjacency(g, attr="weight", sparse=FALSE)
PF(adj_matrixg,4.5,2,FALSE)
edge_list <- read.csv("bio-CE-CX.edges", header = FALSE, sep = " ")
edge_list <- read.csv("bio-CE-CX.edges", header = FALSE, sep = " ")
graph <- graph_from_data_frame(d = edge_list, directed = FALSE, vertices = NULL)
adj_matrix <- as_adjacency_matrix(graph, type = "both",sparse = FALSE)
PF(adj_matrix,4.5,2,FALSE)
View(PF)
PF <- function(W, a, apr_lvl, parallel) {
if (isSymmetric(W)) {
U <- tril(W)
idx <- which(U != 0, arr.ind = TRUE)
} else {
idx <- which(W != 0, arr.ind = TRUE)
}
i <- idx[,1]
j <- idx[,2]
w <- W[idx]
k_in <- colSums(W != 0, na.rm = TRUE)
s_in <- colSums(W, na.rm = TRUE)
k_out <- rowSums(W != 0, na.rm = TRUE)
s_out <- rowSums(W, na.rm = TRUE)
k_in <- k_in[j]
k_out <- k_out[i]
s_in <- s_in[j]
s_out <- s_out[i]
if (a < 0) {
cat('Starting the ML estimation\n')
a <- get_ML_estimate(W)
cat(paste0('Estimation ended, a = ', a, '\n'))
}
if (any(!is.integer(w))) {
apr_lvl <- 0
}
p1 <- polya_cdf(w, s_in, k_in, a, apr_lvl, parallel)
p2 <- polya_cdf(w, s_out, k_out, a, apr_lvl, parallel)
P <- pmin(p1, p2)
P[k_in == 1] <- p2[k_in == 1]
P[k_out == 1] <- p1[k_out == 1]
P[!is.na(k_in) & !is.na(k_out) & k_in == 1 & k_out == 1] <- 1
return(P)
}
PF(adj_matrix,4.5,2,FALSE)
library("mvtnorm")
PF(adj_matrix,4.5,2,FALSE)
library(Matrix)
PF(adj_matrix,4.5,2,FALSE)
View(PF)
View(polya_cdf)
View(polya_cdf)
